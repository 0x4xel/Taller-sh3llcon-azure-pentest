// Creo el keyvault
resource "azurerm_key_vault" "supersecretmisty" {
  name                        = "supersecretmisty${local.prefix}"
  location                    = azurerm_resource_group.misty.location
  resource_group_name         = azurerm_resource_group.misty.name
  enabled_for_disk_encryption = true
  tenant_id                   = data.azurerm_client_config.current.tenant_id
  soft_delete_retention_days  = 7
  purge_protection_enabled    = false

  sku_name = "standard"

  access_policy {
    tenant_id = data.azurerm_client_config.current.tenant_id
    object_id = data.azurerm_client_config.current.object_id

    key_permissions = [
      "Get","List", "Update","Create"
    ]
    secret_permissions = [
      "Get", "List", "Set", "Delete", "Recover"
    ]
 
  }
  depends_on = [azurerm_resource_group.misty]
}


// Creo el secreto dentro de supersecretmisty
resource "azurerm_key_vault_secret" "misty-access" {
  name         = "misty-access"
  value        = random_password.user_misty_password.result
  key_vault_id = azurerm_key_vault.supersecretmisty.id
  depends_on   = [azurerm_key_vault.supersecretmisty]
}


// Misty role policy para que misty vea los vualt
resource "azurerm_role_assignment" "keyvault_brock_access_policy" {
  role_definition_name = "Reader"
  principal_id         = azuread_user.brock.object_id
  scope                = azurerm_key_vault.supersecretmisty.id
  depends_on   = [azuread_user.brock, azurerm_key_vault.supersecretmisty]

}


// Misty Access policy para que misty pueda listar y leer secretos y claves
resource "azurerm_key_vault_access_policy" "keyvault_access_policy" {
  key_vault_id = azurerm_key_vault.supersecretmisty.id
  tenant_id    = data.azurerm_client_config.current.tenant_id
  object_id    = azuread_user.brock.id

  key_permissions = [
    "Get", "List", "Encrypt", "Decrypt"
  ]
  secret_permissions = [
    "Get", "List"
   ]
  depends_on = [azurerm_key_vault.supersecretmisty, azurerm_key_vault_secret.misty-access, azuread_user.brock]
}



